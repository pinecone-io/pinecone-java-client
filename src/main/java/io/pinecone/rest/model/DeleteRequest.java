/*
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.pinecone.rest.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * The request for the &#x60;Delete&#x60; operation.
 */
@ApiModel(description = "The request for the `Delete` operation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-15T23:32:38.960526Z[Etc/UTC]")
public class DeleteRequest {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<String> ids = null;

  public static final String SERIALIZED_NAME_DELETE_ALL = "deleteAll";
  @SerializedName(SERIALIZED_NAME_DELETE_ALL)
  private Boolean deleteAll = false;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Object filter;


  public DeleteRequest ids(List<String> ids) {
    
    this.ids = ids;
    return this;
  }

  public DeleteRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<String>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Vectors to delete.
   * @return ids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"id-0\",\"id-1\"]", value = "Vectors to delete.")

  public List<String> getIds() {
    return ids;
  }


  public void setIds(List<String> ids) {
    this.ids = ids;
  }


  public DeleteRequest deleteAll(Boolean deleteAll) {
    
    this.deleteAll = deleteAll;
    return this;
  }

   /**
   * This indicates that all vectors in the index namespace should be deleted.
   * @return deleteAll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "This indicates that all vectors in the index namespace should be deleted.")

  public Boolean getDeleteAll() {
    return deleteAll;
  }


  public void setDeleteAll(Boolean deleteAll) {
    this.deleteAll = deleteAll;
  }


  public DeleteRequest namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The namespace to delete vectors from, if applicable.
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example-namespace", value = "The namespace to delete vectors from, if applicable.")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public DeleteRequest filter(Object filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive with specifying ids to delete in the ids param or using delete_all&#x3D;True. See https://www.pinecone.io/docs/metadata-filtering/.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive with specifying ids to delete in the ids param or using delete_all=True. See https://www.pinecone.io/docs/metadata-filtering/.")

  public Object getFilter() {
    return filter;
  }


  public void setFilter(Object filter) {
    this.filter = filter;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteRequest deleteRequest = (DeleteRequest) o;
    return Objects.equals(this.ids, deleteRequest.ids) &&
        Objects.equals(this.deleteAll, deleteRequest.deleteAll) &&
        Objects.equals(this.namespace, deleteRequest.namespace) &&
        Objects.equals(this.filter, deleteRequest.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, deleteAll, namespace, filter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteRequest {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    deleteAll: ").append(toIndentedString(deleteAll)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

