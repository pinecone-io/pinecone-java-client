/*
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.pinecone.rest.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * The request for the &#x60;Query&#x60; operation.
 */
@ApiModel(description = "The request for the `Query` operation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-15T23:32:38.960526Z[Etc/UTC]")
public class QueryRequest {
  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_TOP_K = "topK";
  @SerializedName(SERIALIZED_NAME_TOP_K)
  private Long topK;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Object filter;

  public static final String SERIALIZED_NAME_INCLUDE_VALUES = "includeValues";
  @SerializedName(SERIALIZED_NAME_INCLUDE_VALUES)
  private Boolean includeValues = false;

  public static final String SERIALIZED_NAME_INCLUDE_METADATA = "includeMetadata";
  @SerializedName(SERIALIZED_NAME_INCLUDE_METADATA)
  private Boolean includeMetadata = false;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<QueryVector> queries = null;

  public static final String SERIALIZED_NAME_VECTOR = "vector";
  @SerializedName(SERIALIZED_NAME_VECTOR)
  private List<Float> vector = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;


  public QueryRequest namespace(String namespace) {
    
    this.namespace = namespace;
    return this;
  }

   /**
   * The namespace to query.
   * @return namespace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example-namespace", value = "The namespace to query.")

  public String getNamespace() {
    return namespace;
  }


  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public QueryRequest topK(Long topK) {
    
    this.topK = topK;
    return this;
  }

   /**
   * The number of results to return for each query.
   * minimum: 1
   * maximum: 10000
   * @return topK
  **/
  @ApiModelProperty(example = "10", required = true, value = "The number of results to return for each query.")

  public Long getTopK() {
    return topK;
  }


  public void setTopK(Long topK) {
    this.topK = topK;
  }


  public QueryRequest filter(Object filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * The filter to apply. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"genre\":{\"$in\":[\"comedy\",\"documentary\",\"drama\"]},\"year\":{\"$eq\":2019}}", value = "The filter to apply. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/.")

  public Object getFilter() {
    return filter;
  }


  public void setFilter(Object filter) {
    this.filter = filter;
  }


  public QueryRequest includeValues(Boolean includeValues) {
    
    this.includeValues = includeValues;
    return this;
  }

   /**
   * Indicates whether vector values are included in the response.
   * @return includeValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether vector values are included in the response.")

  public Boolean getIncludeValues() {
    return includeValues;
  }


  public void setIncludeValues(Boolean includeValues) {
    this.includeValues = includeValues;
  }


  public QueryRequest includeMetadata(Boolean includeMetadata) {
    
    this.includeMetadata = includeMetadata;
    return this;
  }

   /**
   * Indicates whether metadata is included in the response as well as the ids.
   * @return includeMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates whether metadata is included in the response as well as the ids.")

  public Boolean getIncludeMetadata() {
    return includeMetadata;
  }


  public void setIncludeMetadata(Boolean includeMetadata) {
    this.includeMetadata = includeMetadata;
  }


  public QueryRequest queries(List<QueryVector> queries) {
    
    this.queries = queries;
    return this;
  }

  public QueryRequest addQueriesItem(QueryVector queriesItem) {
    if (this.queries == null) {
      this.queries = new ArrayList<QueryVector>();
    }
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * DEPRECATED. The query vectors. Each &#x60;query()&#x60; request can contain only one of the parameters &#x60;queries&#x60;, &#x60;vector&#x60;, or  &#x60;id&#x60;.
   * @return queries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.")

  public List<QueryVector> getQueries() {
    return queries;
  }


  public void setQueries(List<QueryVector> queries) {
    this.queries = queries;
  }


  public QueryRequest vector(List<Float> vector) {
    
    this.vector = vector;
    return this;
  }

  public QueryRequest addVectorItem(Float vectorItem) {
    if (this.vector == null) {
      this.vector = new ArrayList<Float>();
    }
    this.vector.add(vectorItem);
    return this;
  }

   /**
   * The query vector. This should be the same length as the dimension of the index being queried. Each &#x60;query()&#x60; request can contain only one of the parameters &#x60;id&#x60; or &#x60;vector&#x60;.
   * @return vector
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8]", value = "The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.")

  public List<Float> getVector() {
    return vector;
  }


  public void setVector(List<Float> vector) {
    this.vector = vector;
  }


  public QueryRequest id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique ID of the vector to be used as a query vector. Each &#x60;query()&#x60; request can contain only one of the parameters &#x60;queries&#x60;, &#x60;vector&#x60;, or  &#x60;id&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "example-vector-1", value = "The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRequest queryRequest = (QueryRequest) o;
    return Objects.equals(this.namespace, queryRequest.namespace) &&
        Objects.equals(this.topK, queryRequest.topK) &&
        Objects.equals(this.filter, queryRequest.filter) &&
        Objects.equals(this.includeValues, queryRequest.includeValues) &&
        Objects.equals(this.includeMetadata, queryRequest.includeMetadata) &&
        Objects.equals(this.queries, queryRequest.queries) &&
        Objects.equals(this.vector, queryRequest.vector) &&
        Objects.equals(this.id, queryRequest.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespace, topK, filter, includeValues, includeMetadata, queries, vector, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequest {\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    topK: ").append(toIndentedString(topK)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    includeValues: ").append(toIndentedString(includeValues)).append("\n");
    sb.append("    includeMetadata: ").append(toIndentedString(includeMetadata)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    vector: ").append(toIndentedString(vector)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

