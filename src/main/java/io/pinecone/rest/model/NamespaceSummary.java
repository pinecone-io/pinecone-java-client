/*
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.pinecone.rest.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A summary of the contents of a namespace.
 */
@ApiModel(description = "A summary of the contents of a namespace.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-06-15T23:32:38.960526Z[Etc/UTC]")
public class NamespaceSummary {
  public static final String SERIALIZED_NAME_VECTOR_COUNT = "vectorCount";
  @SerializedName(SERIALIZED_NAME_VECTOR_COUNT)
  private Long vectorCount;


  public NamespaceSummary vectorCount(Long vectorCount) {
    
    this.vectorCount = vectorCount;
    return this;
  }

   /**
   * The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the underlying index and corresponding query results, etc.
   * @return vectorCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50000", value = "The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the underlying index and corresponding query results, etc.")

  public Long getVectorCount() {
    return vectorCount;
  }


  public void setVectorCount(Long vectorCount) {
    this.vectorCount = vectorCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NamespaceSummary namespaceSummary = (NamespaceSummary) o;
    return Objects.equals(this.vectorCount, namespaceSummary.vectorCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vectorCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NamespaceSummary {\n");
    sb.append("    vectorCount: ").append(toIndentedString(vectorCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

