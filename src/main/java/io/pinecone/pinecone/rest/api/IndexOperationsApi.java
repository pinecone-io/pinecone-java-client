/*
 * Pinecone API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.pinecone.rest.api;

import io.pinecone.rest.ApiCallback;
import io.pinecone.rest.ApiClient;
import io.pinecone.rest.ApiException;
import io.pinecone.rest.ApiResponse;
import io.pinecone.rest.Configuration;
import io.pinecone.rest.Pair;
import io.pinecone.rest.ProgressRequestBody;
import io.pinecone.rest.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.pinecone.rest.model.CreateRequest;
import io.pinecone.rest.model.IndexMeta;
import io.pinecone.rest.model.PatchRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IndexOperationsApi {
    private ApiClient localVarApiClient;

    public IndexOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IndexOperationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createIndex
     * @param createRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Encountered when request exceeds quota or an invalid index name. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIndexCall(CreateRequest createRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createRequest;

        // create path and map variables
        String localVarPath = "/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIndexValidateBeforeCall(CreateRequest createRequest, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createIndexCall(createRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of shards and replicas to use, and more.
     * @param createRequest  (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Encountered when request exceeds quota or an invalid index name. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public String createIndex(CreateRequest createRequest) throws ApiException {
        ApiResponse<String> localVarResp = createIndexWithHttpInfo(createRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of shards and replicas to use, and more.
     * @param createRequest  (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Encountered when request exceeds quota or an invalid index name. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> createIndexWithHttpInfo(CreateRequest createRequest) throws ApiException {
        okhttp3.Call localVarCall = createIndexValidateBeforeCall(createRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation creates a Pinecone index. You can use it to specify the measure of similarity, the dimension of vectors to be stored in the index, the numbers of shards and replicas to use, and more.
     * @param createRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Encountered when request exceeds quota or an invalid index name. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Index of given name already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIndexAsync(CreateRequest createRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIndexValidateBeforeCall(createRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIndex
     * @param indexName The name of the index (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIndexCall(String indexName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{indexName}"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIndexValidateBeforeCall(String indexName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling deleteIndex(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIndexCall(indexName, _callback);
        return localVarCall;

    }

    /**
     * 
     * This operation deletes an existing index.
     * @param indexName The name of the index (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public String deleteIndex(String indexName) throws ApiException {
        ApiResponse<String> localVarResp = deleteIndexWithHttpInfo(indexName);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation deletes an existing index.
     * @param indexName The name of the index (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> deleteIndexWithHttpInfo(String indexName) throws ApiException {
        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(indexName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation deletes an existing index.
     * @param indexName The name of the index (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIndexAsync(String indexName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(indexName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeIndex
     * @param indexName The name of the index (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration information and deployment status of the index </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeIndexCall(String indexName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases/{indexName}"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeIndexValidateBeforeCall(String indexName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling describeIndex(Async)");
        }
        

        okhttp3.Call localVarCall = describeIndexCall(indexName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get a description of an index.
     * @param indexName The name of the index (required)
     * @return IndexMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration information and deployment status of the index </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public IndexMeta describeIndex(String indexName) throws ApiException {
        ApiResponse<IndexMeta> localVarResp = describeIndexWithHttpInfo(indexName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a description of an index.
     * @param indexName The name of the index (required)
     * @return ApiResponse&lt;IndexMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration information and deployment status of the index </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndexMeta> describeIndexWithHttpInfo(String indexName) throws ApiException {
        okhttp3.Call localVarCall = describeIndexValidateBeforeCall(indexName, null);
        Type localVarReturnType = new TypeToken<IndexMeta>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a description of an index.
     * @param indexName The name of the index (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Configuration information and deployment status of the index </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeIndexAsync(String indexName, final ApiCallback<IndexMeta> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeIndexValidateBeforeCall(indexName, _callback);
        Type localVarReturnType = new TypeToken<IndexMeta>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIndexes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndexesCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/databases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIndexesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listIndexesCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * This operation returns a list of your Pinecone indexes.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listIndexes() throws ApiException {
        ApiResponse<List<String>> localVarResp = listIndexesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns a list of your Pinecone indexes.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listIndexesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listIndexesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns a list of your Pinecone indexes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This operation returns a list of all the indexes that you have previously created, and which are associated with the given API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndexesAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIndexesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scaleIndex
     * @param indexName The name of the index (required)
     * @param patchRequest The number of replicas (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request,not enough quota. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scaleIndexCall(String indexName, PatchRequest patchRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = patchRequest;

        // create path and map variables
        String localVarPath = "/databases/{indexName}"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scaleIndexValidateBeforeCall(String indexName, PatchRequest patchRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling scaleIndex(Async)");
        }
        

        okhttp3.Call localVarCall = scaleIndexCall(indexName, patchRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * This operation increases or decreases the number of replicas in an index.
     * @param indexName The name of the index (required)
     * @param patchRequest The number of replicas (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request,not enough quota. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public String scaleIndex(String indexName, PatchRequest patchRequest) throws ApiException {
        ApiResponse<String> localVarResp = scaleIndexWithHttpInfo(indexName, patchRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation increases or decreases the number of replicas in an index.
     * @param indexName The name of the index (required)
     * @param patchRequest The number of replicas (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request,not enough quota. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> scaleIndexWithHttpInfo(String indexName, PatchRequest patchRequest) throws ApiException {
        okhttp3.Call localVarCall = scaleIndexValidateBeforeCall(indexName, patchRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation increases or decreases the number of replicas in an index.
     * @param indexName The name of the index (required)
     * @param patchRequest The number of replicas (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The index has been successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request,not enough quota. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. Can be caused by invalid parameters. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scaleIndexAsync(String indexName, PatchRequest patchRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = scaleIndexValidateBeforeCall(indexName, patchRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
