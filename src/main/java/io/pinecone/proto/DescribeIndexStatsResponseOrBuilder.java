// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db_data_2025-01.proto
// Protobuf Java Version: 4.29.3

package io.pinecone.proto;

public interface DescribeIndexStatsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:DescribeIndexStatsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1 [json_name = "namespaces"];</code>
   */
  int getNamespacesCount();
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1 [json_name = "namespaces"];</code>
   */
  boolean containsNamespaces(
      java.lang.String key);
  /**
   * Use {@link #getNamespacesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.pinecone.proto.NamespaceSummary>
  getNamespaces();
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1 [json_name = "namespaces"];</code>
   */
  java.util.Map<java.lang.String, io.pinecone.proto.NamespaceSummary>
  getNamespacesMap();
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1 [json_name = "namespaces"];</code>
   */
  /* nullable */
io.pinecone.proto.NamespaceSummary getNamespacesOrDefault(
      java.lang.String key,
      /* nullable */
io.pinecone.proto.NamespaceSummary defaultValue);
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1 [json_name = "namespaces"];</code>
   */
  io.pinecone.proto.NamespaceSummary getNamespacesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * The dimension of the indexed vectors. Not specified if `sparse` index.
   * </pre>
   *
   * <code>optional uint32 dimension = 2 [json_name = "dimension"];</code>
   * @return Whether the dimension field is set.
   */
  boolean hasDimension();
  /**
   * <pre>
   * The dimension of the indexed vectors. Not specified if `sparse` index.
   * </pre>
   *
   * <code>optional uint32 dimension = 2 [json_name = "dimension"];</code>
   * @return The dimension.
   */
  int getDimension();

  /**
   * <pre>
   * The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
   *
   * Serverless indexes scale automatically as needed, so index fullness is relevant only for pod-based indexes.
   *
   * The index fullness result may be inaccurate during pod resizing; to get the status of a pod resizing process, use [`describe_index`](https://docs.pinecone.io/reference/api/2024-04/control-plane/describe_index).
   * </pre>
   *
   * <code>float index_fullness = 3 [json_name = "indexFullness"];</code>
   * @return The indexFullness.
   */
  float getIndexFullness();

  /**
   * <pre>
   * The total number of vectors in the index, regardless of whether a metadata filter expression was passed
   * </pre>
   *
   * <code>uint32 total_vector_count = 4 [json_name = "totalVectorCount"];</code>
   * @return The totalVectorCount.
   */
  int getTotalVectorCount();

  /**
   * <pre>
   * The metric of the index.
   * </pre>
   *
   * <code>optional string metric = 5 [json_name = "metric"];</code>
   * @return Whether the metric field is set.
   */
  boolean hasMetric();
  /**
   * <pre>
   * The metric of the index.
   * </pre>
   *
   * <code>optional string metric = 5 [json_name = "metric"];</code>
   * @return The metric.
   */
  java.lang.String getMetric();
  /**
   * <pre>
   * The metric of the index.
   * </pre>
   *
   * <code>optional string metric = 5 [json_name = "metric"];</code>
   * @return The bytes for metric.
   */
  com.google.protobuf.ByteString
      getMetricBytes();

  /**
   * <pre>
   * The type of the vector the index supports.
   * </pre>
   *
   * <code>optional string vector_type = 6 [json_name = "vectorType"];</code>
   * @return Whether the vectorType field is set.
   */
  boolean hasVectorType();
  /**
   * <pre>
   * The type of the vector the index supports.
   * </pre>
   *
   * <code>optional string vector_type = 6 [json_name = "vectorType"];</code>
   * @return The vectorType.
   */
  java.lang.String getVectorType();
  /**
   * <pre>
   * The type of the vector the index supports.
   * </pre>
   *
   * <code>optional string vector_type = 6 [json_name = "vectorType"];</code>
   * @return The bytes for vectorType.
   */
  com.google.protobuf.ByteString
      getVectorTypeBytes();
}
