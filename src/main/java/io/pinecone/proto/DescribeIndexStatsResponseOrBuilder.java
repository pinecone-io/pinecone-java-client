// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_service.proto

// Protobuf Java Version: 3.25.2
package io.pinecone.proto;

public interface DescribeIndexStatsResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:DescribeIndexStatsResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1;</code>
   */
  int getNamespacesCount();
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1;</code>
   */
  boolean containsNamespaces(
      String key);
  /**
   * Use {@link #getNamespacesMap()} instead.
   */
  @Deprecated
  java.util.Map<String, NamespaceSummary>
  getNamespaces();
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1;</code>
   */
  java.util.Map<String, NamespaceSummary>
  getNamespacesMap();
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1;</code>
   */
  /* nullable */
NamespaceSummary getNamespacesOrDefault(
      String key,
      /* nullable */
NamespaceSummary defaultValue);
  /**
   * <pre>
   * A mapping for each namespace in the index from the namespace name to a
   * summary of its contents. If a metadata filter expression is present, the
   * summary will reflect only vectors matching that expression.
   * </pre>
   *
   * <code>map&lt;string, .NamespaceSummary&gt; namespaces = 1;</code>
   */
  NamespaceSummary getNamespacesOrThrow(
      String key);

  /**
   * <pre>
   * The dimension of the indexed vectors.
   * </pre>
   *
   * <code>uint32 dimension = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The dimension.
   */
  int getDimension();

  /**
   * <pre>
   * The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
   * </pre>
   *
   * <code>float index_fullness = 3 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The indexFullness.
   */
  float getIndexFullness();

  /**
   * <pre>
   * The total number of vectors in the index, regardless of whether a metadata filter expression was passed
   * </pre>
   *
   * <code>uint32 total_vector_count = 4 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The totalVectorCount.
   */
  int getTotalVectorCount();
}
