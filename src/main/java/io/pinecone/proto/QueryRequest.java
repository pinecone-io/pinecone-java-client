// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db_data_2025-01.proto
// Protobuf Java Version: 4.29.3

package io.pinecone.proto;

/**
 * <pre>
 * The request for the `query` operation.
 * </pre>
 *
 * Protobuf type {@code QueryRequest}
 */
public final class QueryRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:QueryRequest)
    QueryRequestOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 29,
      /* patch= */ 3,
      /* suffix= */ "",
      QueryRequest.class.getName());
  }
  // Use QueryRequest.newBuilder() to construct.
  private QueryRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private QueryRequest() {
    namespace_ = "";
    queries_ = java.util.Collections.emptyList();
    vector_ = emptyFloatList();
    id_ = "";
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.pinecone.proto.DbData202501.internal_static_QueryRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.pinecone.proto.DbData202501.internal_static_QueryRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.pinecone.proto.QueryRequest.class, io.pinecone.proto.QueryRequest.Builder.class);
  }

  private int bitField0_;
  public static final int NAMESPACE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object namespace_ = "";
  /**
   * <pre>
   * The namespace to query.
   * </pre>
   *
   * <code>string namespace = 1 [json_name = "namespace"];</code>
   * @return The namespace.
   */
  @java.lang.Override
  public java.lang.String getNamespace() {
    java.lang.Object ref = namespace_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      namespace_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The namespace to query.
   * </pre>
   *
   * <code>string namespace = 1 [json_name = "namespace"];</code>
   * @return The bytes for namespace.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNamespaceBytes() {
    java.lang.Object ref = namespace_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      namespace_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TOP_K_FIELD_NUMBER = 2;
  private int topK_ = 0;
  /**
   * <pre>
   * The number of results to return for each query.
   * </pre>
   *
   * <code>uint32 top_k = 2 [json_name = "topK", (.google.api.field_behavior) = REQUIRED];</code>
   * @return The topK.
   */
  @java.lang.Override
  public int getTopK() {
    return topK_;
  }

  public static final int FILTER_FIELD_NUMBER = 3;
  private com.google.protobuf.Struct filter_;
  /**
   * <pre>
   * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
   * </pre>
   *
   * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
   * @return Whether the filter field is set.
   */
  @java.lang.Override
  public boolean hasFilter() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
   * </pre>
   *
   * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
   * @return The filter.
   */
  @java.lang.Override
  public com.google.protobuf.Struct getFilter() {
    return filter_ == null ? com.google.protobuf.Struct.getDefaultInstance() : filter_;
  }
  /**
   * <pre>
   * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
   * </pre>
   *
   * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.StructOrBuilder getFilterOrBuilder() {
    return filter_ == null ? com.google.protobuf.Struct.getDefaultInstance() : filter_;
  }

  public static final int INCLUDE_VALUES_FIELD_NUMBER = 4;
  private boolean includeValues_ = false;
  /**
   * <pre>
   * Indicates whether vector values are included in the response.
   * </pre>
   *
   * <code>bool include_values = 4 [json_name = "includeValues"];</code>
   * @return The includeValues.
   */
  @java.lang.Override
  public boolean getIncludeValues() {
    return includeValues_;
  }

  public static final int INCLUDE_METADATA_FIELD_NUMBER = 5;
  private boolean includeMetadata_ = false;
  /**
   * <pre>
   * Indicates whether metadata is included in the response as well as the ids.
   * </pre>
   *
   * <code>bool include_metadata = 5 [json_name = "includeMetadata"];</code>
   * @return The includeMetadata.
   */
  @java.lang.Override
  public boolean getIncludeMetadata() {
    return includeMetadata_;
  }

  public static final int QUERIES_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<io.pinecone.proto.QueryVector> queries_;
  /**
   * <pre>
   * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<io.pinecone.proto.QueryVector> getQueriesList() {
    return queries_;
  }
  /**
   * <pre>
   * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<? extends io.pinecone.proto.QueryVectorOrBuilder> 
      getQueriesOrBuilderList() {
    return queries_;
  }
  /**
   * <pre>
   * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public int getQueriesCount() {
    return queries_.size();
  }
  /**
   * <pre>
   * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public io.pinecone.proto.QueryVector getQueries(int index) {
    return queries_.get(index);
  }
  /**
   * <pre>
   * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public io.pinecone.proto.QueryVectorOrBuilder getQueriesOrBuilder(
      int index) {
    return queries_.get(index);
  }

  public static final int VECTOR_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.FloatList vector_ =
      emptyFloatList();
  /**
   * <pre>
   * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
   * </pre>
   *
   * <code>repeated float vector = 7 [json_name = "vector"];</code>
   * @return A list containing the vector.
   */
  @java.lang.Override
  public java.util.List<java.lang.Float>
      getVectorList() {
    return vector_;
  }
  /**
   * <pre>
   * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
   * </pre>
   *
   * <code>repeated float vector = 7 [json_name = "vector"];</code>
   * @return The count of vector.
   */
  public int getVectorCount() {
    return vector_.size();
  }
  /**
   * <pre>
   * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
   * </pre>
   *
   * <code>repeated float vector = 7 [json_name = "vector"];</code>
   * @param index The index of the element to return.
   * @return The vector at the given index.
   */
  public float getVector(int index) {
    return vector_.getFloat(index);
  }
  private int vectorMemoizedSerializedSize = -1;

  public static final int SPARSE_VECTOR_FIELD_NUMBER = 9;
  private io.pinecone.proto.SparseValues sparseVector_;
  /**
   * <pre>
   * The query sparse values.
   * </pre>
   *
   * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
   * @return Whether the sparseVector field is set.
   */
  @java.lang.Override
  public boolean hasSparseVector() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The query sparse values.
   * </pre>
   *
   * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
   * @return The sparseVector.
   */
  @java.lang.Override
  public io.pinecone.proto.SparseValues getSparseVector() {
    return sparseVector_ == null ? io.pinecone.proto.SparseValues.getDefaultInstance() : sparseVector_;
  }
  /**
   * <pre>
   * The query sparse values.
   * </pre>
   *
   * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
   */
  @java.lang.Override
  public io.pinecone.proto.SparseValuesOrBuilder getSparseVectorOrBuilder() {
    return sparseVector_ == null ? io.pinecone.proto.SparseValues.getDefaultInstance() : sparseVector_;
  }

  public static final int ID_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private volatile java.lang.Object id_ = "";
  /**
   * <pre>
   * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>string id = 8 [json_name = "id"];</code>
   * @return The id.
   */
  @java.lang.Override
  public java.lang.String getId() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      id_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
   * </pre>
   *
   * <code>string id = 8 [json_name = "id"];</code>
   * @return The bytes for id.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getIdBytes() {
    java.lang.Object ref = id_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      id_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(namespace_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, namespace_);
    }
    if (topK_ != 0) {
      output.writeUInt32(2, topK_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getFilter());
    }
    if (includeValues_ != false) {
      output.writeBool(4, includeValues_);
    }
    if (includeMetadata_ != false) {
      output.writeBool(5, includeMetadata_);
    }
    for (int i = 0; i < queries_.size(); i++) {
      output.writeMessage(6, queries_.get(i));
    }
    if (getVectorList().size() > 0) {
      output.writeUInt32NoTag(58);
      output.writeUInt32NoTag(vectorMemoizedSerializedSize);
    }
    for (int i = 0; i < vector_.size(); i++) {
      output.writeFloatNoTag(vector_.getFloat(i));
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(id_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 8, id_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(9, getSparseVector());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(namespace_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, namespace_);
    }
    if (topK_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, topK_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getFilter());
    }
    if (includeValues_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, includeValues_);
    }
    if (includeMetadata_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, includeMetadata_);
    }
    for (int i = 0; i < queries_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, queries_.get(i));
    }
    {
      int dataSize = 0;
      dataSize = 4 * getVectorList().size();
      size += dataSize;
      if (!getVectorList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      vectorMemoizedSerializedSize = dataSize;
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(id_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(8, id_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getSparseVector());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.pinecone.proto.QueryRequest)) {
      return super.equals(obj);
    }
    io.pinecone.proto.QueryRequest other = (io.pinecone.proto.QueryRequest) obj;

    if (!getNamespace()
        .equals(other.getNamespace())) return false;
    if (getTopK()
        != other.getTopK()) return false;
    if (hasFilter() != other.hasFilter()) return false;
    if (hasFilter()) {
      if (!getFilter()
          .equals(other.getFilter())) return false;
    }
    if (getIncludeValues()
        != other.getIncludeValues()) return false;
    if (getIncludeMetadata()
        != other.getIncludeMetadata()) return false;
    if (!getQueriesList()
        .equals(other.getQueriesList())) return false;
    if (!getVectorList()
        .equals(other.getVectorList())) return false;
    if (hasSparseVector() != other.hasSparseVector()) return false;
    if (hasSparseVector()) {
      if (!getSparseVector()
          .equals(other.getSparseVector())) return false;
    }
    if (!getId()
        .equals(other.getId())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
    hash = (53 * hash) + getNamespace().hashCode();
    hash = (37 * hash) + TOP_K_FIELD_NUMBER;
    hash = (53 * hash) + getTopK();
    if (hasFilter()) {
      hash = (37 * hash) + FILTER_FIELD_NUMBER;
      hash = (53 * hash) + getFilter().hashCode();
    }
    hash = (37 * hash) + INCLUDE_VALUES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIncludeValues());
    hash = (37 * hash) + INCLUDE_METADATA_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIncludeMetadata());
    if (getQueriesCount() > 0) {
      hash = (37 * hash) + QUERIES_FIELD_NUMBER;
      hash = (53 * hash) + getQueriesList().hashCode();
    }
    if (getVectorCount() > 0) {
      hash = (37 * hash) + VECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getVectorList().hashCode();
    }
    if (hasSparseVector()) {
      hash = (37 * hash) + SPARSE_VECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getSparseVector().hashCode();
    }
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.pinecone.proto.QueryRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static io.pinecone.proto.QueryRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static io.pinecone.proto.QueryRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static io.pinecone.proto.QueryRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.pinecone.proto.QueryRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request for the `query` operation.
   * </pre>
   *
   * Protobuf type {@code QueryRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:QueryRequest)
      io.pinecone.proto.QueryRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.pinecone.proto.DbData202501.internal_static_QueryRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.pinecone.proto.DbData202501.internal_static_QueryRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.pinecone.proto.QueryRequest.class, io.pinecone.proto.QueryRequest.Builder.class);
    }

    // Construct using io.pinecone.proto.QueryRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getFilterFieldBuilder();
        getQueriesFieldBuilder();
        getSparseVectorFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      namespace_ = "";
      topK_ = 0;
      filter_ = null;
      if (filterBuilder_ != null) {
        filterBuilder_.dispose();
        filterBuilder_ = null;
      }
      includeValues_ = false;
      includeMetadata_ = false;
      if (queriesBuilder_ == null) {
        queries_ = java.util.Collections.emptyList();
      } else {
        queries_ = null;
        queriesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      vector_ = emptyFloatList();
      sparseVector_ = null;
      if (sparseVectorBuilder_ != null) {
        sparseVectorBuilder_.dispose();
        sparseVectorBuilder_ = null;
      }
      id_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.pinecone.proto.DbData202501.internal_static_QueryRequest_descriptor;
    }

    @java.lang.Override
    public io.pinecone.proto.QueryRequest getDefaultInstanceForType() {
      return io.pinecone.proto.QueryRequest.getDefaultInstance();
    }

    @java.lang.Override
    public io.pinecone.proto.QueryRequest build() {
      io.pinecone.proto.QueryRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.pinecone.proto.QueryRequest buildPartial() {
      io.pinecone.proto.QueryRequest result = new io.pinecone.proto.QueryRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(io.pinecone.proto.QueryRequest result) {
      if (queriesBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          queries_ = java.util.Collections.unmodifiableList(queries_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.queries_ = queries_;
      } else {
        result.queries_ = queriesBuilder_.build();
      }
    }

    private void buildPartial0(io.pinecone.proto.QueryRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.namespace_ = namespace_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.topK_ = topK_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.filter_ = filterBuilder_ == null
            ? filter_
            : filterBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.includeValues_ = includeValues_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.includeMetadata_ = includeMetadata_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        vector_.makeImmutable();
        result.vector_ = vector_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.sparseVector_ = sparseVectorBuilder_ == null
            ? sparseVector_
            : sparseVectorBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.id_ = id_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.pinecone.proto.QueryRequest) {
        return mergeFrom((io.pinecone.proto.QueryRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.pinecone.proto.QueryRequest other) {
      if (other == io.pinecone.proto.QueryRequest.getDefaultInstance()) return this;
      if (!other.getNamespace().isEmpty()) {
        namespace_ = other.namespace_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.getTopK() != 0) {
        setTopK(other.getTopK());
      }
      if (other.hasFilter()) {
        mergeFilter(other.getFilter());
      }
      if (other.getIncludeValues() != false) {
        setIncludeValues(other.getIncludeValues());
      }
      if (other.getIncludeMetadata() != false) {
        setIncludeMetadata(other.getIncludeMetadata());
      }
      if (queriesBuilder_ == null) {
        if (!other.queries_.isEmpty()) {
          if (queries_.isEmpty()) {
            queries_ = other.queries_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureQueriesIsMutable();
            queries_.addAll(other.queries_);
          }
          onChanged();
        }
      } else {
        if (!other.queries_.isEmpty()) {
          if (queriesBuilder_.isEmpty()) {
            queriesBuilder_.dispose();
            queriesBuilder_ = null;
            queries_ = other.queries_;
            bitField0_ = (bitField0_ & ~0x00000020);
            queriesBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getQueriesFieldBuilder() : null;
          } else {
            queriesBuilder_.addAllMessages(other.queries_);
          }
        }
      }
      if (!other.vector_.isEmpty()) {
        if (vector_.isEmpty()) {
          vector_ = other.vector_;
          vector_.makeImmutable();
          bitField0_ |= 0x00000040;
        } else {
          ensureVectorIsMutable();
          vector_.addAll(other.vector_);
        }
        onChanged();
      }
      if (other.hasSparseVector()) {
        mergeSparseVector(other.getSparseVector());
      }
      if (!other.getId().isEmpty()) {
        id_ = other.id_;
        bitField0_ |= 0x00000100;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              namespace_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 16: {
              topK_ = input.readUInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              input.readMessage(
                  getFilterFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 32: {
              includeValues_ = input.readBool();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              includeMetadata_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              io.pinecone.proto.QueryVector m =
                  input.readMessage(
                      io.pinecone.proto.QueryVector.parser(),
                      extensionRegistry);
              if (queriesBuilder_ == null) {
                ensureQueriesIsMutable();
                queries_.add(m);
              } else {
                queriesBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 61: {
              float v = input.readFloat();
              ensureVectorIsMutable();
              vector_.addFloat(v);
              break;
            } // case 61
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              int alloc = length > 4096 ? 4096 : length;
              ensureVectorIsMutable(alloc / 4);
              while (input.getBytesUntilLimit() > 0) {
                vector_.addFloat(input.readFloat());
              }
              input.popLimit(limit);
              break;
            } // case 58
            case 66: {
              id_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000100;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getSparseVectorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 74
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object namespace_ = "";
    /**
     * <pre>
     * The namespace to query.
     * </pre>
     *
     * <code>string namespace = 1 [json_name = "namespace"];</code>
     * @return The namespace.
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The namespace to query.
     * </pre>
     *
     * <code>string namespace = 1 [json_name = "namespace"];</code>
     * @return The bytes for namespace.
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The namespace to query.
     * </pre>
     *
     * <code>string namespace = 1 [json_name = "namespace"];</code>
     * @param value The namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespace(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      namespace_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The namespace to query.
     * </pre>
     *
     * <code>string namespace = 1 [json_name = "namespace"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNamespace() {
      namespace_ = getDefaultInstance().getNamespace();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The namespace to query.
     * </pre>
     *
     * <code>string namespace = 1 [json_name = "namespace"];</code>
     * @param value The bytes for namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      namespace_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private int topK_ ;
    /**
     * <pre>
     * The number of results to return for each query.
     * </pre>
     *
     * <code>uint32 top_k = 2 [json_name = "topK", (.google.api.field_behavior) = REQUIRED];</code>
     * @return The topK.
     */
    @java.lang.Override
    public int getTopK() {
      return topK_;
    }
    /**
     * <pre>
     * The number of results to return for each query.
     * </pre>
     *
     * <code>uint32 top_k = 2 [json_name = "topK", (.google.api.field_behavior) = REQUIRED];</code>
     * @param value The topK to set.
     * @return This builder for chaining.
     */
    public Builder setTopK(int value) {

      topK_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The number of results to return for each query.
     * </pre>
     *
     * <code>uint32 top_k = 2 [json_name = "topK", (.google.api.field_behavior) = REQUIRED];</code>
     * @return This builder for chaining.
     */
    public Builder clearTopK() {
      bitField0_ = (bitField0_ & ~0x00000002);
      topK_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Struct filter_;
    private com.google.protobuf.SingleFieldBuilder<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> filterBuilder_;
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     * @return Whether the filter field is set.
     */
    public boolean hasFilter() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     * @return The filter.
     */
    public com.google.protobuf.Struct getFilter() {
      if (filterBuilder_ == null) {
        return filter_ == null ? com.google.protobuf.Struct.getDefaultInstance() : filter_;
      } else {
        return filterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    public Builder setFilter(com.google.protobuf.Struct value) {
      if (filterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        filter_ = value;
      } else {
        filterBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    public Builder setFilter(
        com.google.protobuf.Struct.Builder builderForValue) {
      if (filterBuilder_ == null) {
        filter_ = builderForValue.build();
      } else {
        filterBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    public Builder mergeFilter(com.google.protobuf.Struct value) {
      if (filterBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          filter_ != null &&
          filter_ != com.google.protobuf.Struct.getDefaultInstance()) {
          getFilterBuilder().mergeFrom(value);
        } else {
          filter_ = value;
        }
      } else {
        filterBuilder_.mergeFrom(value);
      }
      if (filter_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    public Builder clearFilter() {
      bitField0_ = (bitField0_ & ~0x00000004);
      filter_ = null;
      if (filterBuilder_ != null) {
        filterBuilder_.dispose();
        filterBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    public com.google.protobuf.Struct.Builder getFilterBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getFilterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    public com.google.protobuf.StructOrBuilder getFilterOrBuilder() {
      if (filterBuilder_ != null) {
        return filterBuilder_.getMessageOrBuilder();
      } else {
        return filter_ == null ?
            com.google.protobuf.Struct.getDefaultInstance() : filter_;
      }
    }
    /**
     * <pre>
     * The filter to apply. You can use vector metadata to limit your search. See [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
     * </pre>
     *
     * <code>.google.protobuf.Struct filter = 3 [json_name = "filter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
        getFilterFieldBuilder() {
      if (filterBuilder_ == null) {
        filterBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                getFilter(),
                getParentForChildren(),
                isClean());
        filter_ = null;
      }
      return filterBuilder_;
    }

    private boolean includeValues_ ;
    /**
     * <pre>
     * Indicates whether vector values are included in the response.
     * </pre>
     *
     * <code>bool include_values = 4 [json_name = "includeValues"];</code>
     * @return The includeValues.
     */
    @java.lang.Override
    public boolean getIncludeValues() {
      return includeValues_;
    }
    /**
     * <pre>
     * Indicates whether vector values are included in the response.
     * </pre>
     *
     * <code>bool include_values = 4 [json_name = "includeValues"];</code>
     * @param value The includeValues to set.
     * @return This builder for chaining.
     */
    public Builder setIncludeValues(boolean value) {

      includeValues_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates whether vector values are included in the response.
     * </pre>
     *
     * <code>bool include_values = 4 [json_name = "includeValues"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIncludeValues() {
      bitField0_ = (bitField0_ & ~0x00000008);
      includeValues_ = false;
      onChanged();
      return this;
    }

    private boolean includeMetadata_ ;
    /**
     * <pre>
     * Indicates whether metadata is included in the response as well as the ids.
     * </pre>
     *
     * <code>bool include_metadata = 5 [json_name = "includeMetadata"];</code>
     * @return The includeMetadata.
     */
    @java.lang.Override
    public boolean getIncludeMetadata() {
      return includeMetadata_;
    }
    /**
     * <pre>
     * Indicates whether metadata is included in the response as well as the ids.
     * </pre>
     *
     * <code>bool include_metadata = 5 [json_name = "includeMetadata"];</code>
     * @param value The includeMetadata to set.
     * @return This builder for chaining.
     */
    public Builder setIncludeMetadata(boolean value) {

      includeMetadata_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Indicates whether metadata is included in the response as well as the ids.
     * </pre>
     *
     * <code>bool include_metadata = 5 [json_name = "includeMetadata"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIncludeMetadata() {
      bitField0_ = (bitField0_ & ~0x00000010);
      includeMetadata_ = false;
      onChanged();
      return this;
    }

    private java.util.List<io.pinecone.proto.QueryVector> queries_ =
      java.util.Collections.emptyList();
    private void ensureQueriesIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        queries_ = new java.util.ArrayList<io.pinecone.proto.QueryVector>(queries_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        io.pinecone.proto.QueryVector, io.pinecone.proto.QueryVector.Builder, io.pinecone.proto.QueryVectorOrBuilder> queriesBuilder_;

    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<io.pinecone.proto.QueryVector> getQueriesList() {
      if (queriesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(queries_);
      } else {
        return queriesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public int getQueriesCount() {
      if (queriesBuilder_ == null) {
        return queries_.size();
      } else {
        return queriesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public io.pinecone.proto.QueryVector getQueries(int index) {
      if (queriesBuilder_ == null) {
        return queries_.get(index);
      } else {
        return queriesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setQueries(
        int index, io.pinecone.proto.QueryVector value) {
      if (queriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueriesIsMutable();
        queries_.set(index, value);
        onChanged();
      } else {
        queriesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setQueries(
        int index, io.pinecone.proto.QueryVector.Builder builderForValue) {
      if (queriesBuilder_ == null) {
        ensureQueriesIsMutable();
        queries_.set(index, builderForValue.build());
        onChanged();
      } else {
        queriesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addQueries(io.pinecone.proto.QueryVector value) {
      if (queriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueriesIsMutable();
        queries_.add(value);
        onChanged();
      } else {
        queriesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addQueries(
        int index, io.pinecone.proto.QueryVector value) {
      if (queriesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureQueriesIsMutable();
        queries_.add(index, value);
        onChanged();
      } else {
        queriesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addQueries(
        io.pinecone.proto.QueryVector.Builder builderForValue) {
      if (queriesBuilder_ == null) {
        ensureQueriesIsMutable();
        queries_.add(builderForValue.build());
        onChanged();
      } else {
        queriesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addQueries(
        int index, io.pinecone.proto.QueryVector.Builder builderForValue) {
      if (queriesBuilder_ == null) {
        ensureQueriesIsMutable();
        queries_.add(index, builderForValue.build());
        onChanged();
      } else {
        queriesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addAllQueries(
        java.lang.Iterable<? extends io.pinecone.proto.QueryVector> values) {
      if (queriesBuilder_ == null) {
        ensureQueriesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, queries_);
        onChanged();
      } else {
        queriesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearQueries() {
      if (queriesBuilder_ == null) {
        queries_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        queriesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder removeQueries(int index) {
      if (queriesBuilder_ == null) {
        ensureQueriesIsMutable();
        queries_.remove(index);
        onChanged();
      } else {
        queriesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public io.pinecone.proto.QueryVector.Builder getQueriesBuilder(
        int index) {
      return getQueriesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public io.pinecone.proto.QueryVectorOrBuilder getQueriesOrBuilder(
        int index) {
      if (queriesBuilder_ == null) {
        return queries_.get(index);  } else {
        return queriesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<? extends io.pinecone.proto.QueryVectorOrBuilder> 
         getQueriesOrBuilderList() {
      if (queriesBuilder_ != null) {
        return queriesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(queries_);
      }
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public io.pinecone.proto.QueryVector.Builder addQueriesBuilder() {
      return getQueriesFieldBuilder().addBuilder(
          io.pinecone.proto.QueryVector.getDefaultInstance());
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public io.pinecone.proto.QueryVector.Builder addQueriesBuilder(
        int index) {
      return getQueriesFieldBuilder().addBuilder(
          index, io.pinecone.proto.QueryVector.getDefaultInstance());
    }
    /**
     * <pre>
     * DEPRECATED. The query vectors. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>repeated .QueryVector queries = 6 [json_name = "queries", deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<io.pinecone.proto.QueryVector.Builder> 
         getQueriesBuilderList() {
      return getQueriesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        io.pinecone.proto.QueryVector, io.pinecone.proto.QueryVector.Builder, io.pinecone.proto.QueryVectorOrBuilder> 
        getQueriesFieldBuilder() {
      if (queriesBuilder_ == null) {
        queriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            io.pinecone.proto.QueryVector, io.pinecone.proto.QueryVector.Builder, io.pinecone.proto.QueryVectorOrBuilder>(
                queries_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        queries_ = null;
      }
      return queriesBuilder_;
    }

    private com.google.protobuf.Internal.FloatList vector_ = emptyFloatList();
    private void ensureVectorIsMutable() {
      if (!vector_.isModifiable()) {
        vector_ = makeMutableCopy(vector_);
      }
      bitField0_ |= 0x00000040;
    }
    private void ensureVectorIsMutable(int capacity) {
      if (!vector_.isModifiable()) {
        vector_ = makeMutableCopy(vector_, capacity);
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @return A list containing the vector.
     */
    public java.util.List<java.lang.Float>
        getVectorList() {
      vector_.makeImmutable();
      return vector_;
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @return The count of vector.
     */
    public int getVectorCount() {
      return vector_.size();
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @param index The index of the element to return.
     * @return The vector at the given index.
     */
    public float getVector(int index) {
      return vector_.getFloat(index);
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @param index The index to set the value at.
     * @param value The vector to set.
     * @return This builder for chaining.
     */
    public Builder setVector(
        int index, float value) {

      ensureVectorIsMutable();
      vector_.setFloat(index, value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @param value The vector to add.
     * @return This builder for chaining.
     */
    public Builder addVector(float value) {

      ensureVectorIsMutable();
      vector_.addFloat(value);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @param values The vector to add.
     * @return This builder for chaining.
     */
    public Builder addAllVector(
        java.lang.Iterable<? extends java.lang.Float> values) {
      ensureVectorIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, vector_);
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The query vector. This should be the same length as the dimension of the index being queried. Each `query()` request can contain only one of the parameters `id` or `vector`.
     * </pre>
     *
     * <code>repeated float vector = 7 [json_name = "vector"];</code>
     * @return This builder for chaining.
     */
    public Builder clearVector() {
      vector_ = emptyFloatList();
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }

    private io.pinecone.proto.SparseValues sparseVector_;
    private com.google.protobuf.SingleFieldBuilder<
        io.pinecone.proto.SparseValues, io.pinecone.proto.SparseValues.Builder, io.pinecone.proto.SparseValuesOrBuilder> sparseVectorBuilder_;
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     * @return Whether the sparseVector field is set.
     */
    public boolean hasSparseVector() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     * @return The sparseVector.
     */
    public io.pinecone.proto.SparseValues getSparseVector() {
      if (sparseVectorBuilder_ == null) {
        return sparseVector_ == null ? io.pinecone.proto.SparseValues.getDefaultInstance() : sparseVector_;
      } else {
        return sparseVectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    public Builder setSparseVector(io.pinecone.proto.SparseValues value) {
      if (sparseVectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sparseVector_ = value;
      } else {
        sparseVectorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    public Builder setSparseVector(
        io.pinecone.proto.SparseValues.Builder builderForValue) {
      if (sparseVectorBuilder_ == null) {
        sparseVector_ = builderForValue.build();
      } else {
        sparseVectorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    public Builder mergeSparseVector(io.pinecone.proto.SparseValues value) {
      if (sparseVectorBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          sparseVector_ != null &&
          sparseVector_ != io.pinecone.proto.SparseValues.getDefaultInstance()) {
          getSparseVectorBuilder().mergeFrom(value);
        } else {
          sparseVector_ = value;
        }
      } else {
        sparseVectorBuilder_.mergeFrom(value);
      }
      if (sparseVector_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    public Builder clearSparseVector() {
      bitField0_ = (bitField0_ & ~0x00000080);
      sparseVector_ = null;
      if (sparseVectorBuilder_ != null) {
        sparseVectorBuilder_.dispose();
        sparseVectorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    public io.pinecone.proto.SparseValues.Builder getSparseVectorBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getSparseVectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    public io.pinecone.proto.SparseValuesOrBuilder getSparseVectorOrBuilder() {
      if (sparseVectorBuilder_ != null) {
        return sparseVectorBuilder_.getMessageOrBuilder();
      } else {
        return sparseVector_ == null ?
            io.pinecone.proto.SparseValues.getDefaultInstance() : sparseVector_;
      }
    }
    /**
     * <pre>
     * The query sparse values.
     * </pre>
     *
     * <code>.SparseValues sparse_vector = 9 [json_name = "sparseVector"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        io.pinecone.proto.SparseValues, io.pinecone.proto.SparseValues.Builder, io.pinecone.proto.SparseValuesOrBuilder> 
        getSparseVectorFieldBuilder() {
      if (sparseVectorBuilder_ == null) {
        sparseVectorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            io.pinecone.proto.SparseValues, io.pinecone.proto.SparseValues.Builder, io.pinecone.proto.SparseValuesOrBuilder>(
                getSparseVector(),
                getParentForChildren(),
                isClean());
        sparseVector_ = null;
      }
      return sparseVectorBuilder_;
    }

    private java.lang.Object id_ = "";
    /**
     * <pre>
     * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>string id = 8 [json_name = "id"];</code>
     * @return The id.
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>string id = 8 [json_name = "id"];</code>
     * @return The bytes for id.
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>string id = 8 [json_name = "id"];</code>
     * @param value The id to set.
     * @return This builder for chaining.
     */
    public Builder setId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      id_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>string id = 8 [json_name = "id"];</code>
     * @return This builder for chaining.
     */
    public Builder clearId() {
      id_ = getDefaultInstance().getId();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The unique ID of the vector to be used as a query vector. Each `query()` request can contain only one of the parameters `queries`, `vector`, or  `id`.
     * </pre>
     *
     * <code>string id = 8 [json_name = "id"];</code>
     * @param value The bytes for id to set.
     * @return This builder for chaining.
     */
    public Builder setIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      id_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:QueryRequest)
  }

  // @@protoc_insertion_point(class_scope:QueryRequest)
  private static final io.pinecone.proto.QueryRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.pinecone.proto.QueryRequest();
  }

  public static io.pinecone.proto.QueryRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QueryRequest>
      PARSER = new com.google.protobuf.AbstractParser<QueryRequest>() {
    @java.lang.Override
    public QueryRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<QueryRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<QueryRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.pinecone.proto.QueryRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

