// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: db_data_2025-01.proto
// Protobuf Java Version: 4.29.3

package io.pinecone.proto;

public interface DeleteRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:DeleteRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Vectors to delete.
   * </pre>
   *
   * <code>repeated string ids = 1 [json_name = "ids"];</code>
   * @return A list containing the ids.
   */
  java.util.List<java.lang.String>
      getIdsList();
  /**
   * <pre>
   * Vectors to delete.
   * </pre>
   *
   * <code>repeated string ids = 1 [json_name = "ids"];</code>
   * @return The count of ids.
   */
  int getIdsCount();
  /**
   * <pre>
   * Vectors to delete.
   * </pre>
   *
   * <code>repeated string ids = 1 [json_name = "ids"];</code>
   * @param index The index of the element to return.
   * @return The ids at the given index.
   */
  java.lang.String getIds(int index);
  /**
   * <pre>
   * Vectors to delete.
   * </pre>
   *
   * <code>repeated string ids = 1 [json_name = "ids"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the ids at the given index.
   */
  com.google.protobuf.ByteString
      getIdsBytes(int index);

  /**
   * <pre>
   * This indicates that all vectors in the index namespace should be deleted.
   * </pre>
   *
   * <code>bool delete_all = 2 [json_name = "deleteAll"];</code>
   * @return The deleteAll.
   */
  boolean getDeleteAll();

  /**
   * <pre>
   * The namespace to delete vectors from, if applicable.
   * </pre>
   *
   * <code>string namespace = 3 [json_name = "namespace"];</code>
   * @return The namespace.
   */
  java.lang.String getNamespace();
  /**
   * <pre>
   * The namespace to delete vectors from, if applicable.
   * </pre>
   *
   * <code>string namespace = 3 [json_name = "namespace"];</code>
   * @return The bytes for namespace.
   */
  com.google.protobuf.ByteString
      getNamespaceBytes();

  /**
   * <pre>
   * If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive
   * with specifying ids to delete in the ids param or using `delete_all=True`.
   * For guidance and examples, see [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
   * Serverless indexes do not support delete by metadata. Instead, you can use the `list` operation to fetch the vector IDs based on their common ID prefix and then delete the records by ID.
   * </pre>
   *
   * <code>.google.protobuf.Struct filter = 4 [json_name = "filter"];</code>
   * @return Whether the filter field is set.
   */
  boolean hasFilter();
  /**
   * <pre>
   * If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive
   * with specifying ids to delete in the ids param or using `delete_all=True`.
   * For guidance and examples, see [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
   * Serverless indexes do not support delete by metadata. Instead, you can use the `list` operation to fetch the vector IDs based on their common ID prefix and then delete the records by ID.
   * </pre>
   *
   * <code>.google.protobuf.Struct filter = 4 [json_name = "filter"];</code>
   * @return The filter.
   */
  com.google.protobuf.Struct getFilter();
  /**
   * <pre>
   * If specified, the metadata filter here will be used to select the vectors to delete. This is mutually exclusive
   * with specifying ids to delete in the ids param or using `delete_all=True`.
   * For guidance and examples, see [Understanding metadata](https://docs.pinecone.io/guides/data/understanding-metadata).
   * Serverless indexes do not support delete by metadata. Instead, you can use the `list` operation to fetch the vector IDs based on their common ID prefix and then delete the records by ID.
   * </pre>
   *
   * <code>.google.protobuf.Struct filter = 4 [json_name = "filter"];</code>
   */
  com.google.protobuf.StructOrBuilder getFilterOrBuilder();
}
