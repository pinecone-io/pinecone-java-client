// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vector_service.proto

// Protobuf Java Version: 3.25.2
package io.pinecone.proto;

/**
 * <pre>
 * The request for the `Upsert` operation.
 * </pre>
 *
 * Protobuf type {@code UpsertRequest}
 */
public final class UpsertRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:UpsertRequest)
    UpsertRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UpsertRequest.newBuilder() to construct.
  private UpsertRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UpsertRequest() {
    vectors_ = java.util.Collections.emptyList();
    namespace_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new UpsertRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return VectorServiceOuterClass.internal_static_UpsertRequest_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return VectorServiceOuterClass.internal_static_UpsertRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            UpsertRequest.class, Builder.class);
  }

  public static final int VECTORS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<Vector> vectors_;
  /**
   * <pre>
   * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
   * </pre>
   *
   * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @Override
  public java.util.List<Vector> getVectorsList() {
    return vectors_;
  }
  /**
   * <pre>
   * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
   * </pre>
   *
   * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @Override
  public java.util.List<? extends VectorOrBuilder>
      getVectorsOrBuilderList() {
    return vectors_;
  }
  /**
   * <pre>
   * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
   * </pre>
   *
   * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @Override
  public int getVectorsCount() {
    return vectors_.size();
  }
  /**
   * <pre>
   * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
   * </pre>
   *
   * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @Override
  public Vector getVectors(int index) {
    return vectors_.get(index);
  }
  /**
   * <pre>
   * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
   * </pre>
   *
   * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @Override
  public VectorOrBuilder getVectorsOrBuilder(
      int index) {
    return vectors_.get(index);
  }

  public static final int NAMESPACE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile Object namespace_ = "";
  /**
   * <pre>
   * This is the namespace name where you upsert vectors.
   * </pre>
   *
   * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The namespace.
   */
  @Override
  public String getNamespace() {
    Object ref = namespace_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      namespace_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * This is the namespace name where you upsert vectors.
   * </pre>
   *
   * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for namespace.
   */
  @Override
  public com.google.protobuf.ByteString
      getNamespaceBytes() {
    Object ref = namespace_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      namespace_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < vectors_.size(); i++) {
      output.writeMessage(1, vectors_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(namespace_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, namespace_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < vectors_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, vectors_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(namespace_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, namespace_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof UpsertRequest)) {
      return super.equals(obj);
    }
    UpsertRequest other = (UpsertRequest) obj;

    if (!getVectorsList()
        .equals(other.getVectorsList())) return false;
    if (!getNamespace()
        .equals(other.getNamespace())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getVectorsCount() > 0) {
      hash = (37 * hash) + VECTORS_FIELD_NUMBER;
      hash = (53 * hash) + getVectorsList().hashCode();
    }
    hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
    hash = (53 * hash) + getNamespace().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static UpsertRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static UpsertRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static UpsertRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static UpsertRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static UpsertRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static UpsertRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static UpsertRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static UpsertRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static UpsertRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static UpsertRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static UpsertRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static UpsertRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(UpsertRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The request for the `Upsert` operation.
   * </pre>
   *
   * Protobuf type {@code UpsertRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:UpsertRequest)
      UpsertRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return VectorServiceOuterClass.internal_static_UpsertRequest_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return VectorServiceOuterClass.internal_static_UpsertRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              UpsertRequest.class, Builder.class);
    }

    // Construct using io.pinecone.proto.UpsertRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (vectorsBuilder_ == null) {
        vectors_ = java.util.Collections.emptyList();
      } else {
        vectors_ = null;
        vectorsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      namespace_ = "";
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return VectorServiceOuterClass.internal_static_UpsertRequest_descriptor;
    }

    @Override
    public UpsertRequest getDefaultInstanceForType() {
      return UpsertRequest.getDefaultInstance();
    }

    @Override
    public UpsertRequest build() {
      UpsertRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public UpsertRequest buildPartial() {
      UpsertRequest result = new UpsertRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(UpsertRequest result) {
      if (vectorsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          vectors_ = java.util.Collections.unmodifiableList(vectors_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.vectors_ = vectors_;
      } else {
        result.vectors_ = vectorsBuilder_.build();
      }
    }

    private void buildPartial0(UpsertRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.namespace_ = namespace_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof UpsertRequest) {
        return mergeFrom((UpsertRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(UpsertRequest other) {
      if (other == UpsertRequest.getDefaultInstance()) return this;
      if (vectorsBuilder_ == null) {
        if (!other.vectors_.isEmpty()) {
          if (vectors_.isEmpty()) {
            vectors_ = other.vectors_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureVectorsIsMutable();
            vectors_.addAll(other.vectors_);
          }
          onChanged();
        }
      } else {
        if (!other.vectors_.isEmpty()) {
          if (vectorsBuilder_.isEmpty()) {
            vectorsBuilder_.dispose();
            vectorsBuilder_ = null;
            vectors_ = other.vectors_;
            bitField0_ = (bitField0_ & ~0x00000001);
            vectorsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getVectorsFieldBuilder() : null;
          } else {
            vectorsBuilder_.addAllMessages(other.vectors_);
          }
        }
      }
      if (!other.getNamespace().isEmpty()) {
        namespace_ = other.namespace_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              Vector m =
                  input.readMessage(
                      Vector.parser(),
                      extensionRegistry);
              if (vectorsBuilder_ == null) {
                ensureVectorsIsMutable();
                vectors_.add(m);
              } else {
                vectorsBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              namespace_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<Vector> vectors_ =
      java.util.Collections.emptyList();
    private void ensureVectorsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        vectors_ = new java.util.ArrayList<Vector>(vectors_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        Vector, Vector.Builder, VectorOrBuilder> vectorsBuilder_;

    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public java.util.List<Vector> getVectorsList() {
      if (vectorsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(vectors_);
      } else {
        return vectorsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public int getVectorsCount() {
      if (vectorsBuilder_ == null) {
        return vectors_.size();
      } else {
        return vectorsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Vector getVectors(int index) {
      if (vectorsBuilder_ == null) {
        return vectors_.get(index);
      } else {
        return vectorsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setVectors(
        int index, Vector value) {
      if (vectorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVectorsIsMutable();
        vectors_.set(index, value);
        onChanged();
      } else {
        vectorsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setVectors(
        int index, Vector.Builder builderForValue) {
      if (vectorsBuilder_ == null) {
        ensureVectorsIsMutable();
        vectors_.set(index, builderForValue.build());
        onChanged();
      } else {
        vectorsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder addVectors(Vector value) {
      if (vectorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVectorsIsMutable();
        vectors_.add(value);
        onChanged();
      } else {
        vectorsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder addVectors(
        int index, Vector value) {
      if (vectorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVectorsIsMutable();
        vectors_.add(index, value);
        onChanged();
      } else {
        vectorsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder addVectors(
        Vector.Builder builderForValue) {
      if (vectorsBuilder_ == null) {
        ensureVectorsIsMutable();
        vectors_.add(builderForValue.build());
        onChanged();
      } else {
        vectorsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder addVectors(
        int index, Vector.Builder builderForValue) {
      if (vectorsBuilder_ == null) {
        ensureVectorsIsMutable();
        vectors_.add(index, builderForValue.build());
        onChanged();
      } else {
        vectorsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder addAllVectors(
        Iterable<? extends Vector> values) {
      if (vectorsBuilder_ == null) {
        ensureVectorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, vectors_);
        onChanged();
      } else {
        vectorsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearVectors() {
      if (vectorsBuilder_ == null) {
        vectors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        vectorsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder removeVectors(int index) {
      if (vectorsBuilder_ == null) {
        ensureVectorsIsMutable();
        vectors_.remove(index);
        onChanged();
      } else {
        vectorsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Vector.Builder getVectorsBuilder(
        int index) {
      return getVectorsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public VectorOrBuilder getVectorsOrBuilder(
        int index) {
      if (vectorsBuilder_ == null) {
        return vectors_.get(index);  } else {
        return vectorsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public java.util.List<? extends VectorOrBuilder>
         getVectorsOrBuilderList() {
      if (vectorsBuilder_ != null) {
        return vectorsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(vectors_);
      }
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Vector.Builder addVectorsBuilder() {
      return getVectorsFieldBuilder().addBuilder(
          Vector.getDefaultInstance());
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Vector.Builder addVectorsBuilder(
        int index) {
      return getVectorsFieldBuilder().addBuilder(
          index, Vector.getDefaultInstance());
    }
    /**
     * <pre>
     * An array containing the vectors to upsert. Recommended batch limit is 100 vectors.
     * </pre>
     *
     * <code>repeated .Vector vectors = 1 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public java.util.List<Vector.Builder>
         getVectorsBuilderList() {
      return getVectorsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        Vector, Vector.Builder, VectorOrBuilder>
        getVectorsFieldBuilder() {
      if (vectorsBuilder_ == null) {
        vectorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            Vector, Vector.Builder, VectorOrBuilder>(
                vectors_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        vectors_ = null;
      }
      return vectorsBuilder_;
    }

    private Object namespace_ = "";
    /**
     * <pre>
     * This is the namespace name where you upsert vectors.
     * </pre>
     *
     * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The namespace.
     */
    public String getNamespace() {
      Object ref = namespace_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * This is the namespace name where you upsert vectors.
     * </pre>
     *
     * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The bytes for namespace.
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      Object ref = namespace_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * This is the namespace name where you upsert vectors.
     * </pre>
     *
     * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespace(
        String value) {
      if (value == null) { throw new NullPointerException(); }
      namespace_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is the namespace name where you upsert vectors.
     * </pre>
     *
     * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearNamespace() {
      namespace_ = getDefaultInstance().getNamespace();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is the namespace name where you upsert vectors.
     * </pre>
     *
     * <code>string namespace = 2 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The bytes for namespace to set.
     * @return This builder for chaining.
     */
    public Builder setNamespaceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      namespace_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:UpsertRequest)
  }

  // @@protoc_insertion_point(class_scope:UpsertRequest)
  private static final UpsertRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new UpsertRequest();
  }

  public static UpsertRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UpsertRequest>
      PARSER = new com.google.protobuf.AbstractParser<UpsertRequest>() {
    @Override
    public UpsertRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<UpsertRequest> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<UpsertRequest> getParserForType() {
    return PARSER;
  }

  @Override
  public UpsertRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

