/*
 * Pinecone Admin API
 * Provides an API for managing a Pinecone organization and its resources. 
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.admin.client.api;

import org.openapitools.admin.client.ApiCallback;
import org.openapitools.admin.client.ApiClient;
import org.openapitools.admin.client.ApiException;
import org.openapitools.admin.client.ApiResponse;
import org.openapitools.admin.client.Configuration;
import org.openapitools.admin.client.Pair;
import org.openapitools.admin.client.ProgressRequestBody;
import org.openapitools.admin.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.admin.client.model.APIKey;
import org.openapitools.admin.client.model.APIKeyWithSecret;
import org.openapitools.admin.client.model.CreateAPIKeyRequest;
import org.openapitools.admin.client.model.ErrorResponse;
import org.openapitools.admin.client.model.ListApiKeys200Response;
import java.util.UUID;
import org.openapitools.admin.client.model.UpdateAPIKeyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApiKey
     * @param projectId Project ID (required)
     * @param createAPIKeyRequest The details of the new API key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough available quota to complete this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyCall(UUID projectId, CreateAPIKeyRequest createAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAPIKeyRequest;

        // create path and map variables
        String localVarPath = "/admin/projects/{project_id}/api-keys"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyValidateBeforeCall(UUID projectId, CreateAPIKeyRequest createAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createApiKey(Async)");
        }

        // verify the required parameter 'createAPIKeyRequest' is set
        if (createAPIKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'createAPIKeyRequest' when calling createApiKey(Async)");
        }

        return createApiKeyCall(projectId, createAPIKeyRequest, _callback);

    }

    /**
     * Create an API key
     * Create a new API key for a project. Developers can use the API key to authenticate requests to Pinecone&#39;s Data Plane and Control Plane APIs. 
     * @param projectId Project ID (required)
     * @param createAPIKeyRequest The details of the new API key. (required)
     * @return APIKeyWithSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough available quota to complete this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public APIKeyWithSecret createApiKey(UUID projectId, CreateAPIKeyRequest createAPIKeyRequest) throws ApiException {
        ApiResponse<APIKeyWithSecret> localVarResp = createApiKeyWithHttpInfo(projectId, createAPIKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Create an API key
     * Create a new API key for a project. Developers can use the API key to authenticate requests to Pinecone&#39;s Data Plane and Control Plane APIs. 
     * @param projectId Project ID (required)
     * @param createAPIKeyRequest The details of the new API key. (required)
     * @return ApiResponse&lt;APIKeyWithSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough available quota to complete this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIKeyWithSecret> createApiKeyWithHttpInfo(UUID projectId, CreateAPIKeyRequest createAPIKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(projectId, createAPIKeyRequest, null);
        Type localVarReturnType = new TypeToken<APIKeyWithSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an API key (asynchronously)
     * Create a new API key for a project. Developers can use the API key to authenticate requests to Pinecone&#39;s Data Plane and Control Plane APIs. 
     * @param projectId Project ID (required)
     * @param createAPIKeyRequest The details of the new API key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not enough available quota to complete this operation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyAsync(UUID projectId, CreateAPIKeyRequest createAPIKeyRequest, final ApiCallback<APIKeyWithSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(projectId, createAPIKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<APIKeyWithSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApiKey
     * @param apiKeyId API key ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> API key deletion request accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiKeyCall(UUID apiKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api-keys/{api_key_id}"
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApiKeyValidateBeforeCall(UUID apiKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling deleteApiKey(Async)");
        }

        return deleteApiKeyCall(apiKeyId, _callback);

    }

    /**
     * Delete an API key
     * Delete an API key from a project.
     * @param apiKeyId API key ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> API key deletion request accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApiKey(UUID apiKeyId) throws ApiException {
        deleteApiKeyWithHttpInfo(apiKeyId);
    }

    /**
     * Delete an API key
     * Delete an API key from a project.
     * @param apiKeyId API key ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> API key deletion request accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApiKeyWithHttpInfo(UUID apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = deleteApiKeyValidateBeforeCall(apiKeyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an API key (asynchronously)
     * Delete an API key from a project.
     * @param apiKeyId API key ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> API key deletion request accepted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApiKeyAsync(UUID apiKeyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApiKeyValidateBeforeCall(apiKeyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchApiKey
     * @param apiKeyId API key ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the API key, excluding the API key secret. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchApiKeyCall(UUID apiKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/api-keys/{api_key_id}"
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchApiKeyValidateBeforeCall(UUID apiKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling fetchApiKey(Async)");
        }

        return fetchApiKeyCall(apiKeyId, _callback);

    }

    /**
     * Get API key details
     * Get the details of an API key, excluding the API key secret.
     * @param apiKeyId API key ID (required)
     * @return APIKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the API key, excluding the API key secret. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public APIKey fetchApiKey(UUID apiKeyId) throws ApiException {
        ApiResponse<APIKey> localVarResp = fetchApiKeyWithHttpInfo(apiKeyId);
        return localVarResp.getData();
    }

    /**
     * Get API key details
     * Get the details of an API key, excluding the API key secret.
     * @param apiKeyId API key ID (required)
     * @return ApiResponse&lt;APIKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the API key, excluding the API key secret. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIKey> fetchApiKeyWithHttpInfo(UUID apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = fetchApiKeyValidateBeforeCall(apiKeyId, null);
        Type localVarReturnType = new TypeToken<APIKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get API key details (asynchronously)
     * Get the details of an API key, excluding the API key secret.
     * @param apiKeyId API key ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The details of the API key, excluding the API key secret. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchApiKeyAsync(UUID apiKeyId, final ApiCallback<APIKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchApiKeyValidateBeforeCall(apiKeyId, _callback);
        Type localVarReturnType = new TypeToken<APIKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApiKeys
     * @param projectId Project ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApiKeysCall(UUID projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/projects/{project_id}/api-keys"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listApiKeysValidateBeforeCall(UUID projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling listApiKeys(Async)");
        }

        return listApiKeysCall(projectId, _callback);

    }

    /**
     * List API keys
     * List all API keys in a project.
     * @param projectId Project ID (required)
     * @return ListApiKeys200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public ListApiKeys200Response listApiKeys(UUID projectId) throws ApiException {
        ApiResponse<ListApiKeys200Response> localVarResp = listApiKeysWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * List API keys
     * List all API keys in a project.
     * @param projectId Project ID (required)
     * @return ApiResponse&lt;ListApiKeys200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListApiKeys200Response> listApiKeysWithHttpInfo(UUID projectId) throws ApiException {
        okhttp3.Call localVarCall = listApiKeysValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<ListApiKeys200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List API keys (asynchronously)
     * List all API keys in a project.
     * @param projectId Project ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of API keys. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listApiKeysAsync(UUID projectId, final ApiCallback<ListApiKeys200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listApiKeysValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<ListApiKeys200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApiKey
     * @param apiKeyId API key ID (required)
     * @param updateAPIKeyRequest Updated name and roles for the API key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyCall(UUID apiKeyId, UpdateAPIKeyRequest updateAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAPIKeyRequest;

        // create path and map variables
        String localVarPath = "/admin/api-keys/{api_key_id}"
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApiKeyValidateBeforeCall(UUID apiKeyId, UpdateAPIKeyRequest updateAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling updateApiKey(Async)");
        }

        // verify the required parameter 'updateAPIKeyRequest' is set
        if (updateAPIKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAPIKeyRequest' when calling updateApiKey(Async)");
        }

        return updateApiKeyCall(apiKeyId, updateAPIKeyRequest, _callback);

    }

    /**
     * Update an API key
     * Update the name and roles of an API key. 
     * @param apiKeyId API key ID (required)
     * @param updateAPIKeyRequest Updated name and roles for the API key. (required)
     * @return APIKeyWithSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public APIKeyWithSecret updateApiKey(UUID apiKeyId, UpdateAPIKeyRequest updateAPIKeyRequest) throws ApiException {
        ApiResponse<APIKeyWithSecret> localVarResp = updateApiKeyWithHttpInfo(apiKeyId, updateAPIKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Update an API key
     * Update the name and roles of an API key. 
     * @param apiKeyId API key ID (required)
     * @param updateAPIKeyRequest Updated name and roles for the API key. (required)
     * @return ApiResponse&lt;APIKeyWithSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIKeyWithSecret> updateApiKeyWithHttpInfo(UUID apiKeyId, UpdateAPIKeyRequest updateAPIKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(apiKeyId, updateAPIKeyRequest, null);
        Type localVarReturnType = new TypeToken<APIKeyWithSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an API key (asynchronously)
     * Update the name and roles of an API key. 
     * @param apiKeyId API key ID (required)
     * @param updateAPIKeyRequest Updated name and roles for the API key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> API key created successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. The request body included invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Possible causes: Invalid API key. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error. </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Unexpected error on request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateApiKeyAsync(UUID apiKeyId, UpdateAPIKeyRequest updateAPIKeyRequest, final ApiCallback<APIKeyWithSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApiKeyValidateBeforeCall(apiKeyId, updateAPIKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<APIKeyWithSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
