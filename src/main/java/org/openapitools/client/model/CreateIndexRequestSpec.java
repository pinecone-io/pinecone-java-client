/*
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateIndexRequestSpecPod;
import org.openapitools.client.model.ServerlessSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The spec object defines how the index should be deployed.  For serverless indexes, you define only the cloud and region where the index should be hosted. For pod-based indexes, you define the environment where the index should be hosted, the pod type and size to use, and other index characteristics.  Serverless indexes are in public preview and are available only on AWS in the us-west-2 and us-east-1 regions. Test thoroughly before using serverless indexes in production. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-06T02:44:17.986783Z[Etc/UTC]")
public class CreateIndexRequestSpec {
  public static final String SERIALIZED_NAME_SERVERLESS = "serverless";
  @SerializedName(SERIALIZED_NAME_SERVERLESS)
  private ServerlessSpec serverless;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private CreateIndexRequestSpecPod pod;

  public CreateIndexRequestSpec() {
  }

  public CreateIndexRequestSpec serverless(ServerlessSpec serverless) {
    
    this.serverless = serverless;
    return this;
  }

   /**
   * Get serverless
   * @return serverless
  **/
  @javax.annotation.Nullable
  public ServerlessSpec getServerless() {
    return serverless;
  }


  public void setServerless(ServerlessSpec serverless) {
    this.serverless = serverless;
  }


  public CreateIndexRequestSpec pod(CreateIndexRequestSpecPod pod) {
    
    this.pod = pod;
    return this;
  }

   /**
   * Get pod
   * @return pod
  **/
  @javax.annotation.Nullable
  public CreateIndexRequestSpecPod getPod() {
    return pod;
  }


  public void setPod(CreateIndexRequestSpecPod pod) {
    this.pod = pod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateIndexRequestSpec createIndexRequestSpec = (CreateIndexRequestSpec) o;
    return Objects.equals(this.serverless, createIndexRequestSpec.serverless) &&
        Objects.equals(this.pod, createIndexRequestSpec.pod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverless, pod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateIndexRequestSpec {\n");
    sb.append("    serverless: ").append(toIndentedString(serverless)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateIndexRequestSpec
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateIndexRequestSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateIndexRequestSpec is not found in the empty JSON string", CreateIndexRequestSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateIndexRequestSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateIndexRequestSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `serverless`
      if (jsonObj.get("serverless") != null && !jsonObj.get("serverless").isJsonNull()) {
        ServerlessSpec.validateJsonElement(jsonObj.get("serverless"));
      }
      // validate the optional field `pod`
      if (jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) {
        CreateIndexRequestSpecPod.validateJsonElement(jsonObj.get("pod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateIndexRequestSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateIndexRequestSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateIndexRequestSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateIndexRequestSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateIndexRequestSpec>() {
           @Override
           public void write(JsonWriter out, CreateIndexRequestSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateIndexRequestSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateIndexRequestSpec given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateIndexRequestSpec
  * @throws IOException if the JSON string is invalid with respect to CreateIndexRequestSpec
  */
  public static CreateIndexRequestSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateIndexRequestSpec.class);
  }

 /**
  * Convert an instance of CreateIndexRequestSpec to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

