/*
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.db_control.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.db_control.client.JSON;

/**
 * The RestoreJobModel describes the status of a restore job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-09T20:09:44.938992Z[Etc/UTC]")
public class RestoreJobModel {
  public static final String SERIALIZED_NAME_RESTORE_JOB_ID = "restore_job_id";
  @SerializedName(SERIALIZED_NAME_RESTORE_JOB_ID)
  private String restoreJobId;

  public static final String SERIALIZED_NAME_BACKUP_ID = "backup_id";
  @SerializedName(SERIALIZED_NAME_BACKUP_ID)
  private String backupId;

  public static final String SERIALIZED_NAME_TARGET_INDEX_NAME = "target_index_name";
  @SerializedName(SERIALIZED_NAME_TARGET_INDEX_NAME)
  private String targetIndexName;

  public static final String SERIALIZED_NAME_TARGET_INDEX_ID = "target_index_id";
  @SerializedName(SERIALIZED_NAME_TARGET_INDEX_ID)
  private String targetIndexId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_COMPLETED_AT = "completed_at";
  @SerializedName(SERIALIZED_NAME_COMPLETED_AT)
  private OffsetDateTime completedAt;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percent_complete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Float percentComplete;

  public RestoreJobModel() {
  }

  public RestoreJobModel restoreJobId(String restoreJobId) {
    
    this.restoreJobId = restoreJobId;
    return this;
  }

   /**
   * Unique identifier for the restore job
   * @return restoreJobId
  **/
  @javax.annotation.Nonnull
  public String getRestoreJobId() {
    return restoreJobId;
  }


  public void setRestoreJobId(String restoreJobId) {
    this.restoreJobId = restoreJobId;
  }


  public RestoreJobModel backupId(String backupId) {
    
    this.backupId = backupId;
    return this;
  }

   /**
   * Backup used for the restore
   * @return backupId
  **/
  @javax.annotation.Nonnull
  public String getBackupId() {
    return backupId;
  }


  public void setBackupId(String backupId) {
    this.backupId = backupId;
  }


  public RestoreJobModel targetIndexName(String targetIndexName) {
    
    this.targetIndexName = targetIndexName;
    return this;
  }

   /**
   * Name of the index into which data is being restored
   * @return targetIndexName
  **/
  @javax.annotation.Nonnull
  public String getTargetIndexName() {
    return targetIndexName;
  }


  public void setTargetIndexName(String targetIndexName) {
    this.targetIndexName = targetIndexName;
  }


  public RestoreJobModel targetIndexId(String targetIndexId) {
    
    this.targetIndexId = targetIndexId;
    return this;
  }

   /**
   * ID of the index
   * @return targetIndexId
  **/
  @javax.annotation.Nonnull
  public String getTargetIndexId() {
    return targetIndexId;
  }


  public void setTargetIndexId(String targetIndexId) {
    this.targetIndexId = targetIndexId;
  }


  public RestoreJobModel status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the restore job
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public RestoreJobModel createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp when the restore job started
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RestoreJobModel completedAt(OffsetDateTime completedAt) {
    
    this.completedAt = completedAt;
    return this;
  }

   /**
   * Timestamp when the restore job finished
   * @return completedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedAt() {
    return completedAt;
  }


  public void setCompletedAt(OffsetDateTime completedAt) {
    this.completedAt = completedAt;
  }


  public RestoreJobModel percentComplete(Float percentComplete) {
    
    this.percentComplete = percentComplete;
    return this;
  }

   /**
   * The progress made by the restore job out of 100
   * minimum: 0.0
   * maximum: 100.0
   * @return percentComplete
  **/
  @javax.annotation.Nullable
  public Float getPercentComplete() {
    return percentComplete;
  }


  public void setPercentComplete(Float percentComplete) {
    this.percentComplete = percentComplete;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RestoreJobModel instance itself
   */
  public RestoreJobModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreJobModel restoreJobModel = (RestoreJobModel) o;
    return Objects.equals(this.restoreJobId, restoreJobModel.restoreJobId) &&
        Objects.equals(this.backupId, restoreJobModel.backupId) &&
        Objects.equals(this.targetIndexName, restoreJobModel.targetIndexName) &&
        Objects.equals(this.targetIndexId, restoreJobModel.targetIndexId) &&
        Objects.equals(this.status, restoreJobModel.status) &&
        Objects.equals(this.createdAt, restoreJobModel.createdAt) &&
        Objects.equals(this.completedAt, restoreJobModel.completedAt) &&
        Objects.equals(this.percentComplete, restoreJobModel.percentComplete)&&
        Objects.equals(this.additionalProperties, restoreJobModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(restoreJobId, backupId, targetIndexName, targetIndexId, status, createdAt, completedAt, percentComplete, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreJobModel {\n");
    sb.append("    restoreJobId: ").append(toIndentedString(restoreJobId)).append("\n");
    sb.append("    backupId: ").append(toIndentedString(backupId)).append("\n");
    sb.append("    targetIndexName: ").append(toIndentedString(targetIndexName)).append("\n");
    sb.append("    targetIndexId: ").append(toIndentedString(targetIndexId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    completedAt: ").append(toIndentedString(completedAt)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("restore_job_id");
    openapiFields.add("backup_id");
    openapiFields.add("target_index_name");
    openapiFields.add("target_index_id");
    openapiFields.add("status");
    openapiFields.add("created_at");
    openapiFields.add("completed_at");
    openapiFields.add("percent_complete");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("restore_job_id");
    openapiRequiredFields.add("backup_id");
    openapiRequiredFields.add("target_index_name");
    openapiRequiredFields.add("target_index_id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("created_at");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RestoreJobModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreJobModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreJobModel is not found in the empty JSON string", RestoreJobModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RestoreJobModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("restore_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restore_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restore_job_id").toString()));
      }
      if (!jsonObj.get("backup_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup_id").toString()));
      }
      if (!jsonObj.get("target_index_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_index_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_index_name").toString()));
      }
      if (!jsonObj.get("target_index_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_index_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_index_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreJobModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreJobModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreJobModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreJobModel.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreJobModel>() {
           @Override
           public void write(JsonWriter out, RestoreJobModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreJobModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             RestoreJobModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RestoreJobModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RestoreJobModel
  * @throws IOException if the JSON string is invalid with respect to RestoreJobModel
  */
  public static RestoreJobModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreJobModel.class);
  }

 /**
  * Convert an instance of RestoreJobModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

