syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.pinecone.proto";
import "google/protobuf/struct.proto";


message Vector {

  // This is the vector's unique id.
  string                 id = 1;

  // This is the vector data included in the request.
  repeated float         values = 2;

  // This is the metadata included in the request.
  google.protobuf.Struct metadata = 3;
}

message ScoredVector {

  // This is the vector's unique id.
  string                 id = 1;

  // This is a measure of similarity between this vector and the query vector.  The higher the score, the more they are similar.
  float                  score = 2;

  // This is the vector data, if it is requested.
  repeated float         values = 3;

  // This is the metadata, if it is requested.
  google.protobuf.Struct metadata = 4;
}

// The request for the `Upsert` operation.
message UpsertRequest {
  // This is the actual array data.
  repeated Vector vectors = 1;

  // This is the namespace name where you upsert vectors.
  string          namespace = 2;
}

// The response for the `Upsert` operation.
message UpsertResponse {
  // The number of vectors upserted.
  uint32   upserted_count = 1;
}

// The request for the `Delete` operation.
message DeleteRequest {
  // Vectors to delete.
  repeated string ids = 1;

  // This indicates that all vectors in the index namespace should be deleted.
  bool            delete_all = 2;

  // The namespace to delete vectors from, if applicable.
  string          namespace = 3;
}

// The response for the `Delete` operation.
message DeleteResponse {}

// The request for the `Fetch` operation.
message FetchRequest {
  // The vector ids to fetch.
  repeated string ids = 1;

  string          namespace = 2;
}

// The response for the `Fetch` operation.
message FetchResponse {
  // The fetched vectors, in the form of a map between the fetched ids and the fetched vectors
  map<string, Vector> vectors = 1;

  // The namespace of the vectors.
  string          namespace = 2;
}

// A single query vector within a `QueryRequest`.
message QueryVector {

  // The query vector values. This should be the same length as the dimension of the index being queried.
  repeated float         values = 1;

  // An override for the number of results to return for this query vector.
  uint32                 top_k = 2;

  // An override the namespace to search.
  string                 namespace = 3;

  // An override for the metadata filter to apply. This replaces the request-level filter.
  google.protobuf.Struct filter = 4;
}

// The request for the `Query` operation.
message QueryRequest {
  // The namespace to query.
  string                 namespace = 1;

  // The number of results to return for each query.
  uint32                 top_k = 2;

  // The filter to apply if no filter is specified in `QueryVector. You can use vector metadata to limit your search. See https://www.pinecone.io/docs/metadata-filtering/`
  google.protobuf.Struct filter = 3;

  // Indicates whether vector values are included in the response.
  bool                   include_values = 4;

  // Indicates whether metadata is included in the response as well as the ids.
  bool                   include_metadata = 5;

  // The query vectors.
  repeated QueryVector   queries = 6;
}

// The query results for a single `QueryVector`
message SingleQueryResults {
  // The matches for the vectors.
  repeated ScoredVector matches = 1;

  // The namespace for the vectors.
  string                namespace = 2;
}

// The response for the `Query` operation. These are the matches found for a particular query vector. The matches are ordered from most similar to least similar.
message QueryResponse {
  // The results of each query. The order is the same as `QueryRequest.queries`.
  repeated SingleQueryResults results = 1;
}

// The request for the `DescribeIndexStats` operation.
message DescribeIndexStatsRequest {
}

// A summary of the contents of a namespace.
message NamespaceSummary {
  // The number of vectors stored in this namespace. Note that updates to this field may lag behind updates to the
  // underlying index and corresponding query results, etc.
  uint32 vector_count = 1;
}

// The response for the `DescribeIndexStats` operation.
message DescribeIndexStatsResponse {

  // A mapping for each namespace in the index from namespace name to a summary of its contents.
  map<string, NamespaceSummary> namespaces = 1;

  // The dimension of the indexed vectors.
  uint32 dimension = 2 ;

  // The fullness of the index.
  float index_fullness = 3 ;
}

// The `VectorService` interface is exposed by Pinecone's vector index services.
// This service could also be called a `gRPC` service or a `REST`-like api.
service VectorService {
  // Upsert
  //
  // The `Upsert` operation writes vectors into a namespace.
  // If a new value is upserted for an existing vector id, it will overwrite the previous value.
  rpc Upsert(UpsertRequest) returns (UpsertResponse) {
  }

  // Delete
  //
  // The `Delete` operation deletes vectors, by id, from a single namespace.
  // You can delete items by their id, from a single namespace.
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
  }

  // Fetch
  //
  // The `Fetch` operation looks up and returns vectors, by id, from a single namespace.
  // The returned vectors include the vector data and/or metadata.
  rpc Fetch(FetchRequest) returns (FetchResponse) {
  }

  // Query
  //
  // The `Query` operation searches a namespace, using one or more query vectors.
  // It retrieves the ids of the most similar items in a namespace, along with their similarity scores.
  rpc Query(QueryRequest) returns (QueryResponse) {
  }

  // DescribeIndexStats
  //
  // The `DescribeIndexStats` operation returns statistics about the index's contents.
  // For example: The vector count per namespace and the number of dimensions.
  rpc DescribeIndexStats(DescribeIndexStatsRequest) returns (DescribeIndexStatsResponse) {
  }
}